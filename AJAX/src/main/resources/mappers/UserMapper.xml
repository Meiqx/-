<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      
 "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<!-- namespace：对应哪个接口 -->
<mapper namespace="cn.tedu.mybatis.UserMapper">

	<!-- id：自定义名称 -->
	<!-- type：将数据封装到哪种类型的对象中 -->
	<resultMap id="UserMap"
		type="cn.tedu.mybatis.User">
		<!-- id节点：配置主键对应关系 -->
		<!-- column：查询结果的列名 -->
		<!-- property：属性名 -->
		<id column="id" property="id" />
		<!-- result节点：配置其它对应关系 -->
		<result column="is_delete" property="isDelete" />
	</resultMap>
	
	<!-- id：抽象方法的名称 -->
	<insert id="insert"
		useGeneratedKeys="true"
		keyProperty="id">
		INSERT INTO t_user (
			username, password, 
			age, phone, 
			email, is_delete
		) VALUES (
			#{username}, #{password},
			#{age}, #{phone},
			#{email}, #{isDelete}
		)
	</insert>
	
	<delete id="deleteById">
		DELETE FROM t_user WHERE id=#{id}
	</delete>
	
	<!-- Integer deleteByIds(List<Integer> ids); -->
	<delete id="deleteByIds">
		DELETE FROM t_user WHERE id IN (
			<foreach collection="list"
				item="id" separator=",">
				#{id}
			</foreach>
		)
	</delete>
	
	<update id="updatePassword">
		UPDATE t_user SET password=#{password}
	</update>
	
	<!-- Integer updateEmailById(Integer id, String email); -->
	<update id="updateEmailById">
		UPDATE 
			t_user 
		SET 
			email=#{email} 
		WHERE 
			id=#{id}
	</update>
	
	<!-- Integer count(); -->
	<select id="count"
		resultType="java.lang.Integer">
		SELECT COUNT(*) FROM t_user
	</select>
	
	<!-- User findById(Integer id); -->
	<select id="findById"
		resultType="cn.tedu.mybatis.User">
		SELECT 
			id, username,
			password, age,
			phone, email,
			is_delete AS isDelete
		FROM 
			t_user 
		WHERE 
			id=#{id}
	</select>
	
	<!-- User findByUsername(String username); -->
	<select id="findByUsername"
		resultType="cn.tedu.mybatis.User">
		SELECT 
			* 
		FROM 
			t_user 
		WHERE 
			username=#{username}
	</select>
	
	<!-- User findByMaxAge(); -->
	<select id="findByMaxAge"
		resultMap="UserMap">
		SELECT 
			* 
		FROM 
			t_user 
		ORDER BY 
			age DESC 
		LIMIT 
			0,1
	</select>
	
	
	<!-- List<User> findAll(); -->
	<select id="findAll"
		resultMap="UserMap">
		SELECT 
			* 
		FROM 
			t_user 
		ORDER BY 
			id
	</select>
	
	<!-- List<User> find(
		@Param("where") String where, 
		@Param("orderBy") String orderBy, 
		@Param("offset") Integer offset, 
		@Param("count") Integer count) -->
	<select id="find"
		resultType="cn.tedu.mybatis.User">
		SELECT 
			* 
		FROM 
			t_user
		<if test="where != null">
		WHERE
			${where}
		</if>
		<if test="orderBy != null">
		ORDER BY
			${orderBy}
		</if>
		<if test="offset != null and count != null">
		LIMIT
			#{offset}, #{count}
		</if>
	</select>
	
	<select id="findVOById" 
		resultType="cn.tedu.mybatis.UserVO">
		SELECT
			t_user.id, username,
			password, age,
			phone, email,
			is_delete AS isDelete,
			department_id AS departmentId,
			name AS departmentName
		FROM
			t_user
		LEFT JOIN
			t_department
		ON
			t_user.department_id=t_department.id
		WHERE
			t_user.id=#{id}
	</select>
	
</mapper>






